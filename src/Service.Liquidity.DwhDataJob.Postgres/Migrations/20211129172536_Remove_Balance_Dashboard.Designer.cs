// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Service.Liquidity.DwhDataJob.Postgres;

#nullable disable

namespace Service.Liquidity.DwhDataJob.Postgres.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20211129172536_Remove_Balance_Dashboard")]
    partial class Remove_Balance_Dashboard
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("liquidity_dwhdata")
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Service.Liquidity.DwhDataJob.Domain.Models.CommissionDashboard", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Asset")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<decimal>("Commission")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("CommissionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastMessageId")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Asset", "CommissionDate")
                        .IsUnique();

                    b.ToTable("commissiondashboard", "liquidity_dwhdata");
                });

            modelBuilder.Entity("Service.Liquidity.DwhDataJob.Postgres.Models.ConvertIndexPriceEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("BaseAsset")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("Error")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<string>("QuotedAsset")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Error");

                    b.HasIndex("UpdateDate");

                    b.HasIndex("BaseAsset", "QuotedAsset")
                        .IsUnique();

                    b.ToTable("convertprice", "liquidity_dwhdata");
                });

            modelBuilder.Entity("Service.Liquidity.DwhDataJob.Postgres.Models.ExternalBalanceEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Asset")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<decimal>("Balance")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("BalanceDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Exchange")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Asset");

                    b.HasIndex("BalanceDate");

                    b.HasIndex("Exchange");

                    b.HasIndex("Exchange", "Asset", "BalanceDate")
                        .IsUnique();

                    b.ToTable("externalbalance", "liquidity_dwhdata");
                });

            modelBuilder.Entity("Service.Liquidity.DwhDataJob.Postgres.Models.MarketPriceEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("BrokerId")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("InstrumentStatus")
                        .HasColumnType("integer");

                    b.Property<string>("InstrumentSymbol")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<string>("Source")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("SourceMarket")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.HasKey("Id");

                    b.HasIndex("DateTime");

                    b.HasIndex("InstrumentStatus");

                    b.HasIndex("InstrumentSymbol");

                    b.HasIndex("Source", "SourceMarket")
                        .IsUnique();

                    b.ToTable("marketprice", "liquidity_dwhdata");
                });
#pragma warning restore 612, 618
        }
    }
}
